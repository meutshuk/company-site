/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 VRHeadset.glb 
*/

import React, { useRef } from "react";
import { Float, useGLTF } from "@react-three/drei";
import { Canvas } from "react-three-fiber";

export function Model(props) {
  const { nodes, materials } = useGLTF("/models/VRHeadset.glb");
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes["Headset_M_Cube-Mesh"].geometry}
        material={materials.Headset_M}
      />
      <mesh
        geometry={nodes["Headset_M_Cube-Mesh_1"].geometry}
        material={materials.Foam}
      />
      <mesh
        geometry={nodes["Headset_M_Cube-Mesh_2"].geometry}
        material={materials.Gray_Plastic}
      />
      <mesh
        geometry={nodes["Headset_M_Cube-Mesh_3"].geometry}
        material={materials.Lens}
      />
      <mesh
        geometry={nodes["Headset_M_Cube-Mesh_4"].geometry}
        material={materials.L}
      />
      <mesh
        geometry={nodes["Strap_Cube003-Mesh"].geometry}
        material={materials.Headset_M}
      />
      <mesh
        geometry={nodes["Strap_Cube003-Mesh_1"].geometry}
        material={materials.Strap}
      />
    </group>
  );
}

useGLTF.preload("/models/VRHeadset.glb");

export default function VRHeadset() {
  return (
    <Canvas
      camera={{
        position: [0, 18, -20],
      }}
      style={{ background: "transparent" }}
    >
      {/* <OrbitControls /> */}
      <ambientLight intensity={3.5} />
      <pointLight intensity={3} position={[10, 10, 10]} />
      <Float
        speed={2} // Animation speed, defaults to 1
        rotationIntensity={1} // XYZ rotation intensity, defaults to 1
        floatIntensity={1} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1
      >
        <Model
          scale={22}
          position={[0, -2, 0]}
          rotation={[0.3, Math.PI / 1.3, 0]}
        />
      </Float>
    </Canvas>
  );
}
